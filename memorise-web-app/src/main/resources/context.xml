<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!--
		SPRING SETUP 
	 -->

	<!-- Load properties so we can easily change them -->
	<context:property-placeholder location="classpath:application.properties" />

	<!-- Enable Annotation Configuration in order to automatically scan controllers-->
	<context:annotation-config />

	<!-- Allow @Transactional annotations for transaction management -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Search for Rest Resources and configure them automatically -->
	<context:component-scan base-package="org.xored.edu.memorise.rest.resources" />

	<!-- Search for PropertyReader -->
	<context:component-scan base-package="org.xored.edu.memorise" />

	<!--
		DATABASE SETUP 
	 -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.url}" />
	</bean>

	<bean id="entityManagerFactory"
		  class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="memorisePU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<context:component-scan base-package="org.xored.edu.memorise.core.dao"/>

	<bean id="memoEntryDao" class="org.xored.edu.memorise.impl.memo.JpaMemoEntryDao">
	</bean>

	<bean id="searchMemoService" class="org.xored.edu.memorise.impl.memo.JpaSearchMemoService">
	</bean>

	<bean id="userDao" class="org.xored.edu.memorise.impl.user.JpaUserDao">
	</bean>

	<bean id="dataBaseInitializer" class="org.xored.edu.memorise.impl.DataBaseInitializer" init-method="initDataBase">
		<constructor-arg ref="userDao" />
		<constructor-arg ref="memoEntryDao" />
		<constructor-arg ref="passwordEncoder" />
	</bean>

	<!--
		INIT REST COMPONENTS 
	 -->

	<bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" />

	<!-- 
		SPRING SECURITY SETUP
	-->

	<bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="${app.secret}" />
	</bean>

	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider user-service-ref="userDao">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:http
			entry-point-ref="unauthorizedEntryPoint"
			authentication-manager-ref="authenticationManager"
			create-session="stateless">
		<security:csrf disabled="true"/>
		<security:custom-filter ref="authenticationTokenProcessingFilter" position="PRE_AUTH_FILTER" />
		<security:intercept-url pattern="/rest/user/authenticate" access="permitAll" />
		<security:intercept-url method="PUT" pattern="/rest/memo/**" access="hasRole('PUBLISHER')" />
		<security:intercept-url method="POST" pattern="/rest/memo/**" access="hasRole('PUBLISHER')" />
		<security:intercept-url method="DELETE" pattern="/rest/memo/**" access="hasRole('PUBLISHER')" />
	</security:http>

	<bean id="unauthorizedEntryPoint" class="org.xored.edu.memorise.core.rest.UnauthorizedEntryPoint" />

	<bean id="authenticationTokenProcessingFilter" class="org.xored.edu.memorise.core.rest.AuthenticationTokenProcessingFilter">
		<constructor-arg ref="userDao" />
	</bean>

	<!--
	QUARTZ JOB SETUP
	-->

	<bean name="MemoCrawlerJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="org.xored.edu.memorise.MemoCrawlerJob"/>
		<property name="durability" value="true" />
	</bean>

	<!--
	QUARTZ TRIGGER SETUP
	-->

	<bean id="cronTrigger"  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="MemoCrawlerJobDetail" />
		<!-- if in application.properties no indicate quartz.time then job start at 3:00 every day -->
		<property name="cronExpression" value="0 0 3 * * ?" />
	</bean>

	<!--
	QUARTZ SCHEDULER SETUP
	-->

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobDetails">
			<list>
				<ref bean="MemoCrawlerJobDetail" />
			</list>
		</property>
		<property name="triggers">
			<list>
				<ref bean="cronTrigger"/>
			</list>
		</property>
	</bean>

	<!-- Switch on the Caching -->
	<cache:annotation-driven />


	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		  p:cacheManager-ref="ehcache"/>

	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		  p:configLocation="classpath:ehcache.xml"
		  p:shared="true"/>
</beans>
